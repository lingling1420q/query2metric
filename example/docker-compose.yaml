version: "3.8"

networks:
  example-network:

services:
  query2metric:
    build:
      context: ..
    depends_on:
      - mongo
      - postgres
      - sample_data
    ports:
      - 8090:8090
    networks:
      - example-network
    environment:
      MONGO_CONN: mongodb://mongo:27017/test?connect=direct
      POSTGRES_CONN: postgresql://postuser:postpass@postgres/test?sslmode=disable

  sample_data:
    build:
      context: data-gen
      dockerfile: sample.Dockerfile
    depends_on:
      - mongo
      - postgres
    networks:
      - example-network
    environment:
      MONGO_CONN: mongodb://mongo:27017/test?connect=direct
      POSTGRES_CONN: postgresql://postuser:postpass@postgres/test?sslmode=disable

  mongo:
    image: mongo:4.2
    networks:
      - example-network
    environment:
      MONGO_INITDB_DATABASE: test
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  postgres:
    image: postgres
    networks:
      - example-network
    environment:
      POSTGRES_USER: postuser
      POSTGRES_PASSWORD: postpass
      POSTGRES_DB: test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    networks:
      - example-network
    restart: always

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana/:/etc/grafana/provisioning/
    networks:
      - example-network
    restart: always
